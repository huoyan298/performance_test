/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 992.0, "minX": 0.0, "maxY": 25689.0, "series": [{"data": [[0.0, 992.0], [0.1, 994.0], [0.2, 995.0], [0.3, 995.0], [0.4, 996.0], [0.5, 996.0], [0.6, 996.0], [0.7, 997.0], [0.8, 997.0], [0.9, 997.0], [1.0, 997.0], [1.1, 998.0], [1.2, 998.0], [1.3, 998.0], [1.4, 998.0], [1.5, 998.0], [1.6, 999.0], [1.7, 999.0], [1.8, 999.0], [1.9, 999.0], [2.0, 999.0], [2.1, 999.0], [2.2, 1000.0], [2.3, 1000.0], [2.4, 1000.0], [2.5, 1000.0], [2.6, 1000.0], [2.7, 1000.0], [2.8, 1000.0], [2.9, 1000.0], [3.0, 1001.0], [3.1, 1001.0], [3.2, 1001.0], [3.3, 1001.0], [3.4, 1001.0], [3.5, 1001.0], [3.6, 1001.0], [3.7, 1001.0], [3.8, 1001.0], [3.9, 1001.0], [4.0, 1001.0], [4.1, 1002.0], [4.2, 1002.0], [4.3, 1002.0], [4.4, 1002.0], [4.5, 1002.0], [4.6, 1002.0], [4.7, 1002.0], [4.8, 1002.0], [4.9, 1002.0], [5.0, 1002.0], [5.1, 1002.0], [5.2, 1002.0], [5.3, 1002.0], [5.4, 1003.0], [5.5, 1003.0], [5.6, 1003.0], [5.7, 1003.0], [5.8, 1003.0], [5.9, 1003.0], [6.0, 1003.0], [6.1, 1003.0], [6.2, 1003.0], [6.3, 1003.0], [6.4, 1003.0], [6.5, 1003.0], [6.6, 1004.0], [6.7, 1004.0], [6.8, 1004.0], [6.9, 1004.0], [7.0, 1004.0], [7.1, 1004.0], [7.2, 1004.0], [7.3, 1004.0], [7.4, 1004.0], [7.5, 1004.0], [7.6, 1004.0], [7.7, 1004.0], [7.8, 1004.0], [7.9, 1005.0], [8.0, 1005.0], [8.1, 1005.0], [8.2, 1005.0], [8.3, 1005.0], [8.4, 1005.0], [8.5, 1005.0], [8.6, 1005.0], [8.7, 1005.0], [8.8, 1005.0], [8.9, 1005.0], [9.0, 1005.0], [9.1, 1005.0], [9.2, 1006.0], [9.3, 1006.0], [9.4, 1006.0], [9.5, 1006.0], [9.6, 1006.0], [9.7, 1006.0], [9.8, 1006.0], [9.9, 1006.0], [10.0, 1006.0], [10.1, 1006.0], [10.2, 1006.0], [10.3, 1006.0], [10.4, 1006.0], [10.5, 1007.0], [10.6, 1007.0], [10.7, 1007.0], [10.8, 1007.0], [10.9, 1007.0], [11.0, 1007.0], [11.1, 1007.0], [11.2, 1007.0], [11.3, 1007.0], [11.4, 1007.0], [11.5, 1007.0], [11.6, 1007.0], [11.7, 1008.0], [11.8, 1008.0], [11.9, 1008.0], [12.0, 1008.0], [12.1, 1008.0], [12.2, 1008.0], [12.3, 1008.0], [12.4, 1008.0], [12.5, 1008.0], [12.6, 1008.0], [12.7, 1008.0], [12.8, 1009.0], [12.9, 1009.0], [13.0, 1009.0], [13.1, 1009.0], [13.2, 1009.0], [13.3, 1009.0], [13.4, 1009.0], [13.5, 1009.0], [13.6, 1009.0], [13.7, 1009.0], [13.8, 1009.0], [13.9, 1010.0], [14.0, 1010.0], [14.1, 1010.0], [14.2, 1010.0], [14.3, 1010.0], [14.4, 1010.0], [14.5, 1010.0], [14.6, 1010.0], [14.7, 1010.0], [14.8, 1011.0], [14.9, 1011.0], [15.0, 1011.0], [15.1, 1011.0], [15.2, 1011.0], [15.3, 1011.0], [15.4, 1011.0], [15.5, 1012.0], [15.6, 1012.0], [15.7, 1012.0], [15.8, 1012.0], [15.9, 1012.0], [16.0, 1012.0], [16.1, 1012.0], [16.2, 1013.0], [16.3, 1013.0], [16.4, 1013.0], [16.5, 1013.0], [16.6, 1013.0], [16.7, 1014.0], [16.8, 1014.0], [16.9, 1014.0], [17.0, 1014.0], [17.1, 1014.0], [17.2, 1014.0], [17.3, 1015.0], [17.4, 1015.0], [17.5, 1015.0], [17.6, 1015.0], [17.7, 1015.0], [17.8, 1016.0], [17.9, 1016.0], [18.0, 1016.0], [18.1, 1016.0], [18.2, 1016.0], [18.3, 1016.0], [18.4, 1017.0], [18.5, 1017.0], [18.6, 1017.0], [18.7, 1017.0], [18.8, 1017.0], [18.9, 1018.0], [19.0, 1018.0], [19.1, 1018.0], [19.2, 1018.0], [19.3, 1018.0], [19.4, 1019.0], [19.5, 1019.0], [19.6, 1019.0], [19.7, 1019.0], [19.8, 1019.0], [19.9, 1020.0], [20.0, 1020.0], [20.1, 1020.0], [20.2, 1020.0], [20.3, 1020.0], [20.4, 1021.0], [20.5, 1021.0], [20.6, 1021.0], [20.7, 1021.0], [20.8, 1022.0], [20.9, 1022.0], [21.0, 1022.0], [21.1, 1022.0], [21.2, 1022.0], [21.3, 1023.0], [21.4, 1023.0], [21.5, 1023.0], [21.6, 1023.0], [21.7, 1024.0], [21.8, 1024.0], [21.9, 1024.0], [22.0, 1024.0], [22.1, 1025.0], [22.2, 1025.0], [22.3, 1025.0], [22.4, 1025.0], [22.5, 1025.0], [22.6, 1026.0], [22.7, 1026.0], [22.8, 1026.0], [22.9, 1026.0], [23.0, 1027.0], [23.1, 1027.0], [23.2, 1027.0], [23.3, 1027.0], [23.4, 1027.0], [23.5, 1028.0], [23.6, 1028.0], [23.7, 1028.0], [23.8, 1028.0], [23.9, 1029.0], [24.0, 1029.0], [24.1, 1029.0], [24.2, 1029.0], [24.3, 1029.0], [24.4, 1030.0], [24.5, 1030.0], [24.6, 1030.0], [24.7, 1030.0], [24.8, 1030.0], [24.9, 1031.0], [25.0, 1031.0], [25.1, 1031.0], [25.2, 1031.0], [25.3, 1032.0], [25.4, 1032.0], [25.5, 1032.0], [25.6, 1032.0], [25.7, 1032.0], [25.8, 1033.0], [25.9, 1033.0], [26.0, 1033.0], [26.1, 1033.0], [26.2, 1033.0], [26.3, 1034.0], [26.4, 1034.0], [26.5, 1034.0], [26.6, 1034.0], [26.7, 1034.0], [26.8, 1035.0], [26.9, 1035.0], [27.0, 1035.0], [27.1, 1035.0], [27.2, 1036.0], [27.3, 1036.0], [27.4, 1036.0], [27.5, 1036.0], [27.6, 1036.0], [27.7, 1037.0], [27.8, 1037.0], [27.9, 1037.0], [28.0, 1037.0], [28.1, 1037.0], [28.2, 1038.0], [28.3, 1038.0], [28.4, 1038.0], [28.5, 1038.0], [28.6, 1039.0], [28.7, 1039.0], [28.8, 1039.0], [28.9, 1039.0], [29.0, 1039.0], [29.1, 1039.0], [29.2, 1040.0], [29.3, 1040.0], [29.4, 1040.0], [29.5, 1040.0], [29.6, 1040.0], [29.7, 1041.0], [29.8, 1041.0], [29.9, 1041.0], [30.0, 1041.0], [30.1, 1042.0], [30.2, 1042.0], [30.3, 1042.0], [30.4, 1042.0], [30.5, 1043.0], [30.6, 1043.0], [30.7, 1043.0], [30.8, 1043.0], [30.9, 1043.0], [31.0, 1044.0], [31.1, 1044.0], [31.2, 1044.0], [31.3, 1044.0], [31.4, 1045.0], [31.5, 1045.0], [31.6, 1045.0], [31.7, 1045.0], [31.8, 1046.0], [31.9, 1046.0], [32.0, 1046.0], [32.1, 1046.0], [32.2, 1047.0], [32.3, 1047.0], [32.4, 1047.0], [32.5, 1047.0], [32.6, 1047.0], [32.7, 1048.0], [32.8, 1048.0], [32.9, 1048.0], [33.0, 1048.0], [33.1, 1048.0], [33.2, 1049.0], [33.3, 1049.0], [33.4, 1049.0], [33.5, 1049.0], [33.6, 1049.0], [33.7, 1050.0], [33.8, 1050.0], [33.9, 1050.0], [34.0, 1050.0], [34.1, 1051.0], [34.2, 1051.0], [34.3, 1051.0], [34.4, 1051.0], [34.5, 1052.0], [34.6, 1052.0], [34.7, 1052.0], [34.8, 1052.0], [34.9, 1053.0], [35.0, 1053.0], [35.1, 1053.0], [35.2, 1053.0], [35.3, 1053.0], [35.4, 1054.0], [35.5, 1054.0], [35.6, 1054.0], [35.7, 1054.0], [35.8, 1054.0], [35.9, 1055.0], [36.0, 1055.0], [36.1, 1055.0], [36.2, 1055.0], [36.3, 1055.0], [36.4, 1056.0], [36.5, 1056.0], [36.6, 1056.0], [36.7, 1056.0], [36.8, 1056.0], [36.9, 1057.0], [37.0, 1057.0], [37.1, 1057.0], [37.2, 1057.0], [37.3, 1057.0], [37.4, 1058.0], [37.5, 1058.0], [37.6, 1058.0], [37.7, 1058.0], [37.8, 1058.0], [37.9, 1058.0], [38.0, 1059.0], [38.1, 1059.0], [38.2, 1059.0], [38.3, 1059.0], [38.4, 1060.0], [38.5, 1060.0], [38.6, 1060.0], [38.7, 1060.0], [38.8, 1060.0], [38.9, 1060.0], [39.0, 1061.0], [39.1, 1061.0], [39.2, 1061.0], [39.3, 1061.0], [39.4, 1062.0], [39.5, 1062.0], [39.6, 1062.0], [39.7, 1062.0], [39.8, 1062.0], [39.9, 1063.0], [40.0, 1063.0], [40.1, 1063.0], [40.2, 1063.0], [40.3, 1063.0], [40.4, 1064.0], [40.5, 1064.0], [40.6, 1064.0], [40.7, 1064.0], [40.8, 1065.0], [40.9, 1065.0], [41.0, 1065.0], [41.1, 1065.0], [41.2, 1065.0], [41.3, 1065.0], [41.4, 1066.0], [41.5, 1066.0], [41.6, 1066.0], [41.7, 1066.0], [41.8, 1067.0], [41.9, 1067.0], [42.0, 1067.0], [42.1, 1067.0], [42.2, 1067.0], [42.3, 1067.0], [42.4, 1068.0], [42.5, 1068.0], [42.6, 1068.0], [42.7, 1068.0], [42.8, 1068.0], [42.9, 1069.0], [43.0, 1069.0], [43.1, 1069.0], [43.2, 1069.0], [43.3, 1069.0], [43.4, 1070.0], [43.5, 1070.0], [43.6, 1070.0], [43.7, 1070.0], [43.8, 1070.0], [43.9, 1071.0], [44.0, 1071.0], [44.1, 1071.0], [44.2, 1071.0], [44.3, 1071.0], [44.4, 1072.0], [44.5, 1072.0], [44.6, 1072.0], [44.7, 1072.0], [44.8, 1073.0], [44.9, 1073.0], [45.0, 1073.0], [45.1, 1073.0], [45.2, 1073.0], [45.3, 1073.0], [45.4, 1074.0], [45.5, 1074.0], [45.6, 1074.0], [45.7, 1074.0], [45.8, 1074.0], [45.9, 1074.0], [46.0, 1075.0], [46.1, 1075.0], [46.2, 1075.0], [46.3, 1075.0], [46.4, 1075.0], [46.5, 1076.0], [46.6, 1076.0], [46.7, 1076.0], [46.8, 1076.0], [46.9, 1076.0], [47.0, 1077.0], [47.1, 1077.0], [47.2, 1077.0], [47.3, 1077.0], [47.4, 1077.0], [47.5, 1078.0], [47.6, 1078.0], [47.7, 1078.0], [47.8, 1078.0], [47.9, 1078.0], [48.0, 1079.0], [48.1, 1079.0], [48.2, 1079.0], [48.3, 1079.0], [48.4, 1079.0], [48.5, 1080.0], [48.6, 1080.0], [48.7, 1080.0], [48.8, 1080.0], [48.9, 1080.0], [49.0, 1080.0], [49.1, 1081.0], [49.2, 1081.0], [49.3, 1081.0], [49.4, 1081.0], [49.5, 1082.0], [49.6, 1082.0], [49.7, 1082.0], [49.8, 1082.0], [49.9, 1082.0], [50.0, 1082.0], [50.1, 1083.0], [50.2, 1083.0], [50.3, 1083.0], [50.4, 1083.0], [50.5, 1083.0], [50.6, 1083.0], [50.7, 1084.0], [50.8, 1084.0], [50.9, 1084.0], [51.0, 1084.0], [51.1, 1084.0], [51.2, 1085.0], [51.3, 1085.0], [51.4, 1085.0], [51.5, 1085.0], [51.6, 1085.0], [51.7, 1085.0], [51.8, 1086.0], [51.9, 1086.0], [52.0, 1086.0], [52.1, 1086.0], [52.2, 1086.0], [52.3, 1087.0], [52.4, 1087.0], [52.5, 1087.0], [52.6, 1087.0], [52.7, 1087.0], [52.8, 1087.0], [52.9, 1087.0], [53.0, 1088.0], [53.1, 1088.0], [53.2, 1088.0], [53.3, 1088.0], [53.4, 1088.0], [53.5, 1088.0], [53.6, 1089.0], [53.7, 1089.0], [53.8, 1089.0], [53.9, 1089.0], [54.0, 1089.0], [54.1, 1089.0], [54.2, 1090.0], [54.3, 1090.0], [54.4, 1090.0], [54.5, 1090.0], [54.6, 1090.0], [54.7, 1090.0], [54.8, 1091.0], [54.9, 1091.0], [55.0, 1091.0], [55.1, 1091.0], [55.2, 1091.0], [55.3, 1091.0], [55.4, 1091.0], [55.5, 1091.0], [55.6, 1092.0], [55.7, 1092.0], [55.8, 1092.0], [55.9, 1092.0], [56.0, 1092.0], [56.1, 1092.0], [56.2, 1092.0], [56.3, 1093.0], [56.4, 1093.0], [56.5, 1093.0], [56.6, 1093.0], [56.7, 1093.0], [56.8, 1093.0], [56.9, 1093.0], [57.0, 1094.0], [57.1, 1094.0], [57.2, 1094.0], [57.3, 1094.0], [57.4, 1094.0], [57.5, 1094.0], [57.6, 1095.0], [57.7, 1095.0], [57.8, 1095.0], [57.9, 1095.0], [58.0, 1095.0], [58.1, 1095.0], [58.2, 1095.0], [58.3, 1096.0], [58.4, 1096.0], [58.5, 1096.0], [58.6, 1096.0], [58.7, 1096.0], [58.8, 1096.0], [58.9, 1096.0], [59.0, 1096.0], [59.1, 1096.0], [59.2, 1097.0], [59.3, 1097.0], [59.4, 1097.0], [59.5, 1097.0], [59.6, 1097.0], [59.7, 1097.0], [59.8, 1097.0], [59.9, 1098.0], [60.0, 1098.0], [60.1, 1098.0], [60.2, 1098.0], [60.3, 1098.0], [60.4, 1098.0], [60.5, 1099.0], [60.6, 1099.0], [60.7, 1099.0], [60.8, 1099.0], [60.9, 1099.0], [61.0, 1099.0], [61.1, 1100.0], [61.2, 1100.0], [61.3, 1100.0], [61.4, 1100.0], [61.5, 1100.0], [61.6, 1100.0], [61.7, 1101.0], [61.8, 1101.0], [61.9, 1101.0], [62.0, 1101.0], [62.1, 1101.0], [62.2, 1102.0], [62.3, 1102.0], [62.4, 1102.0], [62.5, 1102.0], [62.6, 1102.0], [62.7, 1103.0], [62.8, 1103.0], [62.9, 1103.0], [63.0, 1103.0], [63.1, 1104.0], [63.2, 1104.0], [63.3, 1104.0], [63.4, 1104.0], [63.5, 1104.0], [63.6, 1105.0], [63.7, 1105.0], [63.8, 1105.0], [63.9, 1105.0], [64.0, 1106.0], [64.1, 1106.0], [64.2, 1106.0], [64.3, 1106.0], [64.4, 1107.0], [64.5, 1107.0], [64.6, 1107.0], [64.7, 1107.0], [64.8, 1108.0], [64.9, 1108.0], [65.0, 1108.0], [65.1, 1108.0], [65.2, 1109.0], [65.3, 1109.0], [65.4, 1109.0], [65.5, 1110.0], [65.6, 1110.0], [65.7, 1110.0], [65.8, 1111.0], [65.9, 1111.0], [66.0, 1111.0], [66.1, 1112.0], [66.2, 1112.0], [66.3, 1112.0], [66.4, 1112.0], [66.5, 1113.0], [66.6, 1113.0], [66.7, 1113.0], [66.8, 1114.0], [66.9, 1114.0], [67.0, 1114.0], [67.1, 1115.0], [67.2, 1115.0], [67.3, 1115.0], [67.4, 1115.0], [67.5, 1116.0], [67.6, 1116.0], [67.7, 1116.0], [67.8, 1117.0], [67.9, 1117.0], [68.0, 1117.0], [68.1, 1118.0], [68.2, 1118.0], [68.3, 1118.0], [68.4, 1119.0], [68.5, 1119.0], [68.6, 1119.0], [68.7, 1120.0], [68.8, 1120.0], [68.9, 1120.0], [69.0, 1121.0], [69.1, 1121.0], [69.2, 1121.0], [69.3, 1121.0], [69.4, 1122.0], [69.5, 1122.0], [69.6, 1122.0], [69.7, 1123.0], [69.8, 1123.0], [69.9, 1123.0], [70.0, 1124.0], [70.1, 1124.0], [70.2, 1124.0], [70.3, 1125.0], [70.4, 1125.0], [70.5, 1125.0], [70.6, 1126.0], [70.7, 1126.0], [70.8, 1126.0], [70.9, 1127.0], [71.0, 1127.0], [71.1, 1128.0], [71.2, 1128.0], [71.3, 1128.0], [71.4, 1129.0], [71.5, 1129.0], [71.6, 1129.0], [71.7, 1130.0], [71.8, 1130.0], [71.9, 1130.0], [72.0, 1131.0], [72.1, 1131.0], [72.2, 1132.0], [72.3, 1132.0], [72.4, 1132.0], [72.5, 1133.0], [72.6, 1133.0], [72.7, 1133.0], [72.8, 1134.0], [72.9, 1134.0], [73.0, 1135.0], [73.1, 1135.0], [73.2, 1135.0], [73.3, 1136.0], [73.4, 1136.0], [73.5, 1137.0], [73.6, 1137.0], [73.7, 1137.0], [73.8, 1138.0], [73.9, 1138.0], [74.0, 1139.0], [74.1, 1139.0], [74.2, 1139.0], [74.3, 1140.0], [74.4, 1140.0], [74.5, 1141.0], [74.6, 1141.0], [74.7, 1142.0], [74.8, 1142.0], [74.9, 1142.0], [75.0, 1143.0], [75.1, 1143.0], [75.2, 1144.0], [75.3, 1144.0], [75.4, 1144.0], [75.5, 1145.0], [75.6, 1145.0], [75.7, 1146.0], [75.8, 1146.0], [75.9, 1146.0], [76.0, 1147.0], [76.1, 1147.0], [76.2, 1148.0], [76.3, 1148.0], [76.4, 1149.0], [76.5, 1149.0], [76.6, 1149.0], [76.7, 1150.0], [76.8, 1150.0], [76.9, 1151.0], [77.0, 1151.0], [77.1, 1151.0], [77.2, 1152.0], [77.3, 1152.0], [77.4, 1153.0], [77.5, 1153.0], [77.6, 1154.0], [77.7, 1154.0], [77.8, 1155.0], [77.9, 1155.0], [78.0, 1156.0], [78.1, 1156.0], [78.2, 1156.0], [78.3, 1157.0], [78.4, 1157.0], [78.5, 1158.0], [78.6, 1158.0], [78.7, 1159.0], [78.8, 1159.0], [78.9, 1159.0], [79.0, 1160.0], [79.1, 1160.0], [79.2, 1161.0], [79.3, 1161.0], [79.4, 1161.0], [79.5, 1162.0], [79.6, 1162.0], [79.7, 1163.0], [79.8, 1163.0], [79.9, 1164.0], [80.0, 1164.0], [80.1, 1165.0], [80.2, 1165.0], [80.3, 1165.0], [80.4, 1166.0], [80.5, 1166.0], [80.6, 1167.0], [80.7, 1167.0], [80.8, 1168.0], [80.9, 1168.0], [81.0, 1169.0], [81.1, 1169.0], [81.2, 1170.0], [81.3, 1170.0], [81.4, 1171.0], [81.5, 1171.0], [81.6, 1171.0], [81.7, 1172.0], [81.8, 1172.0], [81.9, 1173.0], [82.0, 1174.0], [82.1, 1174.0], [82.2, 1174.0], [82.3, 1175.0], [82.4, 1175.0], [82.5, 1176.0], [82.6, 1177.0], [82.7, 1177.0], [82.8, 1178.0], [82.9, 1178.0], [83.0, 1179.0], [83.1, 1179.0], [83.2, 1180.0], [83.3, 1180.0], [83.4, 1181.0], [83.5, 1181.0], [83.6, 1182.0], [83.7, 1182.0], [83.8, 1183.0], [83.9, 1183.0], [84.0, 1183.0], [84.1, 1184.0], [84.2, 1184.0], [84.3, 1185.0], [84.4, 1185.0], [84.5, 1186.0], [84.6, 1186.0], [84.7, 1187.0], [84.8, 1187.0], [84.9, 1188.0], [85.0, 1188.0], [85.1, 1189.0], [85.2, 1189.0], [85.3, 1190.0], [85.4, 1190.0], [85.5, 1191.0], [85.6, 1191.0], [85.7, 1192.0], [85.8, 1192.0], [85.9, 1193.0], [86.0, 1193.0], [86.1, 1194.0], [86.2, 1194.0], [86.3, 1194.0], [86.4, 1195.0], [86.5, 1195.0], [86.6, 1196.0], [86.7, 1196.0], [86.8, 1196.0], [86.9, 1197.0], [87.0, 1197.0], [87.1, 1197.0], [87.2, 1198.0], [87.3, 1198.0], [87.4, 1199.0], [87.5, 1199.0], [87.6, 1199.0], [87.7, 1200.0], [87.8, 1200.0], [87.9, 1201.0], [88.0, 1201.0], [88.1, 1201.0], [88.2, 1202.0], [88.3, 1202.0], [88.4, 1203.0], [88.5, 1203.0], [88.6, 1204.0], [88.7, 1205.0], [88.8, 1205.0], [88.9, 1206.0], [89.0, 1207.0], [89.1, 1208.0], [89.2, 1209.0], [89.3, 1210.0], [89.4, 1211.0], [89.5, 1212.0], [89.6, 1214.0], [89.7, 1215.0], [89.8, 1216.0], [89.9, 1218.0], [90.0, 1220.0], [90.1, 1222.0], [90.2, 1224.0], [90.3, 1226.0], [90.4, 1228.0], [90.5, 1231.0], [90.6, 1233.0], [90.7, 1236.0], [90.8, 1239.0], [90.9, 1242.0], [91.0, 1246.0], [91.1, 1250.0], [91.2, 1255.0], [91.3, 1259.0], [91.4, 1265.0], [91.5, 1270.0], [91.6, 1278.0], [91.7, 1286.0], [91.8, 1294.0], [91.9, 1302.0], [92.0, 1310.0], [92.1, 1319.0], [92.2, 1328.0], [92.3, 1338.0], [92.4, 1353.0], [92.5, 1369.0], [92.6, 1386.0], [92.7, 1405.0], [92.8, 1422.0], [92.9, 1438.0], [93.0, 1453.0], [93.1, 1475.0], [93.2, 1496.0], [93.3, 1523.0], [93.4, 1552.0], [93.5, 1623.0], [93.6, 1776.0], [93.7, 1942.0], [93.8, 2127.0], [93.9, 2252.0], [94.0, 2460.0], [94.1, 2643.0], [94.2, 2884.0], [94.3, 3098.0], [94.4, 3268.0], [94.5, 3400.0], [94.6, 3517.0], [94.7, 3602.0], [94.8, 3696.0], [94.9, 3792.0], [95.0, 3936.0], [95.1, 4066.0], [95.2, 4371.0], [95.3, 4775.0], [95.4, 5080.0], [95.5, 5664.0], [95.6, 6399.0], [95.7, 6994.0], [95.8, 7463.0], [95.9, 7909.0], [96.0, 8371.0], [96.1, 8556.0], [96.2, 8753.0], [96.3, 9227.0], [96.4, 9569.0], [96.5, 9854.0], [96.6, 10709.0], [96.7, 12908.0], [96.8, 14177.0], [96.9, 15153.0], [97.0, 15767.0], [97.1, 16471.0], [97.2, 17008.0], [97.3, 17513.0], [97.4, 17864.0], [97.5, 18329.0], [97.6, 18554.0], [97.7, 18745.0], [97.8, 19028.0], [97.9, 19605.0], [98.0, 19933.0], [98.1, 20395.0], [98.2, 20706.0], [98.3, 20994.0], [98.4, 21404.0], [98.5, 21626.0], [98.6, 21762.0], [98.7, 21930.0], [98.8, 22099.0], [98.9, 22415.0], [99.0, 22733.0], [99.1, 23083.0], [99.2, 23344.0], [99.3, 23512.0], [99.4, 23651.0], [99.5, 23869.0], [99.6, 24312.0], [99.7, 24853.0], [99.8, 25078.0], [99.9, 25265.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 26646.0, "series": [{"data": [[900.0, 977.0], [1000.0, 26646.0], [1100.0, 12032.0], [1200.0, 1903.0], [1300.0, 366.0], [1400.0, 245.0], [1500.0, 115.0], [1600.0, 37.0], [1700.0, 25.0], [1800.0, 32.0], [1900.0, 28.0], [2000.0, 22.0], [2100.0, 35.0], [2300.0, 25.0], [2200.0, 19.0], [2400.0, 26.0], [2500.0, 22.0], [2600.0, 23.0], [2700.0, 21.0], [2800.0, 16.0], [2900.0, 16.0], [3000.0, 29.0], [3100.0, 27.0], [3200.0, 24.0], [3300.0, 37.0], [3400.0, 38.0], [3500.0, 49.0], [3600.0, 51.0], [3700.0, 43.0], [3800.0, 34.0], [3900.0, 31.0], [4000.0, 31.0], [4100.0, 21.0], [4200.0, 11.0], [4300.0, 8.0], [4400.0, 13.0], [4600.0, 16.0], [4500.0, 7.0], [4800.0, 19.0], [4700.0, 11.0], [5000.0, 18.0], [4900.0, 10.0], [5100.0, 9.0], [5200.0, 5.0], [5300.0, 10.0], [5400.0, 10.0], [5500.0, 4.0], [5600.0, 4.0], [5800.0, 5.0], [5700.0, 5.0], [6100.0, 9.0], [5900.0, 5.0], [6000.0, 4.0], [6300.0, 8.0], [6200.0, 9.0], [6400.0, 11.0], [6500.0, 7.0], [6600.0, 4.0], [6900.0, 11.0], [6700.0, 8.0], [6800.0, 6.0], [7000.0, 2.0], [7100.0, 8.0], [7300.0, 12.0], [7400.0, 16.0], [7200.0, 9.0], [7500.0, 9.0], [7600.0, 14.0], [7900.0, 7.0], [7800.0, 7.0], [7700.0, 10.0], [8100.0, 10.0], [8000.0, 6.0], [8600.0, 28.0], [8500.0, 27.0], [8400.0, 23.0], [8300.0, 15.0], [8700.0, 12.0], [8200.0, 15.0], [8800.0, 11.0], [8900.0, 14.0], [9100.0, 6.0], [9200.0, 3.0], [9000.0, 7.0], [9700.0, 17.0], [9500.0, 20.0], [9300.0, 12.0], [9600.0, 15.0], [9400.0, 15.0], [10200.0, 5.0], [10000.0, 6.0], [9800.0, 20.0], [9900.0, 13.0], [10100.0, 2.0], [10500.0, 2.0], [10700.0, 2.0], [10400.0, 4.0], [10600.0, 2.0], [10900.0, 4.0], [11200.0, 1.0], [11000.0, 1.0], [11100.0, 2.0], [11500.0, 3.0], [11400.0, 2.0], [11300.0, 1.0], [11700.0, 2.0], [11600.0, 3.0], [12000.0, 3.0], [12200.0, 2.0], [12100.0, 3.0], [11900.0, 2.0], [11800.0, 1.0], [12400.0, 3.0], [12700.0, 2.0], [12500.0, 3.0], [12300.0, 3.0], [12600.0, 2.0], [13200.0, 1.0], [12900.0, 6.0], [13100.0, 6.0], [13000.0, 1.0], [13300.0, 4.0], [12800.0, 1.0], [13500.0, 5.0], [13600.0, 5.0], [13800.0, 2.0], [13700.0, 4.0], [13400.0, 3.0], [14000.0, 5.0], [14200.0, 6.0], [14300.0, 4.0], [14100.0, 4.0], [13900.0, 1.0], [14700.0, 5.0], [14400.0, 5.0], [14600.0, 8.0], [14500.0, 4.0], [14800.0, 3.0], [14900.0, 2.0], [15300.0, 6.0], [15100.0, 7.0], [15000.0, 5.0], [15200.0, 2.0], [15600.0, 6.0], [15700.0, 8.0], [15400.0, 7.0], [15800.0, 6.0], [15500.0, 11.0], [15900.0, 8.0], [16200.0, 5.0], [16300.0, 9.0], [16000.0, 5.0], [16100.0, 4.0], [16600.0, 13.0], [16400.0, 10.0], [17200.0, 11.0], [17400.0, 12.0], [17000.0, 11.0], [16800.0, 7.0], [18400.0, 25.0], [17800.0, 12.0], [18200.0, 10.0], [17600.0, 10.0], [18000.0, 14.0], [19200.0, 2.0], [18600.0, 28.0], [18800.0, 14.0], [19000.0, 10.0], [19400.0, 8.0], [19600.0, 14.0], [20000.0, 11.0], [20200.0, 9.0], [20400.0, 13.0], [19800.0, 12.0], [21200.0, 12.0], [20800.0, 11.0], [20600.0, 18.0], [21000.0, 11.0], [21400.0, 13.0], [22000.0, 24.0], [21800.0, 27.0], [21600.0, 29.0], [22200.0, 8.0], [22400.0, 11.0], [23200.0, 20.0], [23000.0, 10.0], [23400.0, 25.0], [22600.0, 19.0], [22800.0, 8.0], [23600.0, 27.0], [23800.0, 22.0], [24000.0, 14.0], [24200.0, 4.0], [24400.0, 6.0], [25200.0, 22.0], [25000.0, 24.0], [24800.0, 16.0], [25400.0, 11.0], [24600.0, 6.0], [25600.0, 1.0], [16500.0, 9.0], [17300.0, 9.0], [16700.0, 6.0], [17100.0, 3.0], [16900.0, 6.0], [18300.0, 11.0], [17900.0, 9.0], [17500.0, 17.0], [17700.0, 13.0], [18100.0, 6.0], [18500.0, 20.0], [18700.0, 20.0], [18900.0, 15.0], [19100.0, 9.0], [19300.0, 5.0], [20100.0, 9.0], [19500.0, 15.0], [19700.0, 17.0], [20300.0, 11.0], [19900.0, 8.0], [21500.0, 25.0], [21300.0, 13.0], [20500.0, 12.0], [20900.0, 14.0], [20700.0, 22.0], [21100.0, 8.0], [21700.0, 35.0], [21900.0, 30.0], [22100.0, 18.0], [22300.0, 17.0], [22500.0, 11.0], [23300.0, 21.0], [23100.0, 15.0], [23500.0, 35.0], [22700.0, 18.0], [22900.0, 17.0], [23700.0, 19.0], [23900.0, 17.0], [24100.0, 5.0], [24300.0, 4.0], [24500.0, 7.0], [24900.0, 25.0], [25100.0, 25.0], [25300.0, 18.0], [25500.0, 6.0], [24700.0, 10.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 45236.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 45236.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 45236.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 68.40928074245952, "minX": 1.58458722E12, "maxY": 485.51568998109633, "series": [{"data": [[1.58458746E12, 440.9083582089561], [1.58458728E12, 146.56759968312684], [1.58458734E12, 242.1055120975071], [1.58458722E12, 68.40928074245952], [1.58458752E12, 485.51568998109633], [1.5845874E12, 352.61750118091743]], "isOverall": false, "label": "bzm - Concurrency Thread Group-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58458752E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1003.0, "minX": 50.0, "maxY": 25551.5, "series": [{"data": [[50.0, 1042.148120300753], [51.0, 1054.0], [52.0, 1122.0], [53.0, 1128.3333333333333], [55.0, 1060.5], [56.0, 1120.0], [58.0, 1042.0], [62.0, 1086.5], [66.0, 1086.0], [70.0, 1059.3333333333333], [71.0, 1016.0], [74.0, 1013.0], [75.0, 1046.4], [78.0, 1022.3333333333334], [79.0, 1039.0], [80.0, 1061.0], [83.0, 1053.6666666666667], [84.0, 1036.0], [87.0, 1039.0], [88.0, 1038.6666666666667], [89.0, 1038.5], [91.0, 1051.25], [93.0, 1036.0], [96.0, 1055.6000000000001], [97.0, 1107.0], [100.0, 1052.5230322814627], [101.0, 1009.0], [103.0, 1044.0], [105.0, 1003.0], [106.0, 1055.25], [110.0, 1050.0], [111.0, 1062.6666666666667], [112.0, 1075.75], [113.0, 1097.0], [114.0, 1127.0], [116.0, 1045.3846153846157], [117.0, 1114.0], [118.0, 1057.3636363636365], [119.0, 1107.0], [120.0, 1078.6666666666667], [121.0, 1060.0], [123.0, 1121.5], [127.0, 1087.0], [132.0, 1099.25], [133.0, 1107.0], [135.0, 1122.5], [136.0, 1043.25], [137.0, 1131.6666666666667], [139.0, 1074.125], [140.0, 1093.0], [142.0, 1111.0], [143.0, 1036.5], [146.0, 1180.5], [147.0, 1060.6666666666667], [148.0, 1125.0], [149.0, 1150.3333333333333], [150.0, 1113.70926021728], [153.0, 1039.5], [155.0, 1106.0], [158.0, 1019.6666666666666], [159.0, 1098.8333333333333], [164.0, 1069.6], [165.0, 1124.25], [166.0, 1144.0], [167.0, 1079.0], [169.0, 1075.4], [170.0, 1088.5], [173.0, 1103.1], [174.0, 1112.5], [176.0, 1074.5], [177.0, 1053.8333333333335], [178.0, 1090.5714285714284], [179.0, 1059.9285714285713], [181.0, 1126.0], [182.0, 1108.6666666666667], [183.0, 1088.9411764705883], [185.0, 1078.3333333333333], [188.0, 1109.4444444444443], [189.0, 1075.5], [190.0, 1085.5], [191.0, 1154.6666666666667], [194.0, 1111.7272727272727], [195.0, 1108.5714285714287], [196.0, 1069.6666666666667], [198.0, 1130.5], [199.0, 1058.6666666666667], [200.0, 1108.8769698120366], [201.0, 1006.0], [203.0, 1073.3333333333333], [204.0, 1153.8333333333333], [205.0, 1117.25], [208.0, 1075.25], [210.0, 1097.4285714285713], [211.0, 1128.5], [213.0, 1078.8], [215.0, 1108.357142857143], [218.0, 1080.0], [220.0, 1134.888888888889], [221.0, 1027.3333333333333], [225.0, 1099.0], [226.0, 1092.3333333333333], [227.0, 1111.0], [231.0, 1102.7777777777778], [233.0, 1126.0], [235.0, 1152.1249999999998], [236.0, 1127.0], [238.0, 1133.5384615384614], [241.0, 1161.0], [242.0, 1144.7272727272727], [243.0, 1138.3571428571431], [245.0, 1133.6666666666667], [248.0, 1112.0], [249.0, 1153.5238095238096], [250.0, 1506.1033669311557], [251.0, 1064.5], [252.0, 1025.8999999999996], [253.0, 1037.0], [257.0, 1035.6428571428569], [256.0, 1060.0], [258.0, 1125.0], [264.0, 1113.383333333334], [265.0, 1159.5], [266.0, 1133.636363636364], [267.0, 1171.5], [268.0, 1167.5151515151515], [269.0, 1167.0], [274.0, 1118.0], [273.0, 1015.3333333333334], [275.0, 1096.0], [278.0, 1121.7272727272725], [279.0, 1123.8999999999999], [281.0, 1063.0], [282.0, 1145.5], [283.0, 1139.75], [286.0, 1170.0], [287.0, 1148.5], [291.0, 1084.5], [292.0, 1011.0], [293.0, 1123.0], [294.0, 1057.0], [297.0, 1022.0], [302.0, 1191.5], [303.0, 1225.0], [298.0, 1010.6666666666666], [299.0, 1042.75], [300.0, 2196.834390058336], [301.0, 1116.2954545454547], [306.0, 1181.0], [305.0, 1165.3333333333333], [307.0, 1164.0714285714287], [318.0, 1388.0], [319.0, 1346.6999999999998], [308.0, 1213.1666666666665], [309.0, 1234.0], [310.0, 1251.0000000000002], [311.0, 1228.6], [312.0, 1227.090909090909], [313.0, 1279.222222222222], [314.0, 1271.5], [322.0, 1400.6], [321.0, 1368.5], [323.0, 1451.7500000000002], [332.0, 1556.2], [334.0, 1539.0], [335.0, 1510.25], [324.0, 1487.5714285714287], [325.0, 1446.769230769231], [326.0, 1445.5], [327.0, 1438.1666666666667], [328.0, 1524.0], [329.0, 1483.157894736842], [330.0, 1510.0], [331.0, 1495.7142857142858], [339.0, 1480.5833333333333], [337.0, 4365.0], [336.0, 1477.0], [342.0, 21905.0], [338.0, 1504.6666666666667], [340.0, 1504.0], [341.0, 1402.0], [344.0, 1343.0], [351.0, 1124.5321100917429], [348.0, 1060.3333333333333], [350.0, 2831.1241610738252], [345.0, 1202.0], [346.0, 4347.142857142857], [347.0, 1034.5714285714287], [355.0, 1136.2051282051282], [352.0, 1165.6499999999999], [353.0, 1205.0], [354.0, 1105.5], [356.0, 1105.0909090909092], [362.0, 1058.0], [363.0, 1067.0], [364.0, 1074.5], [367.0, 1008.5], [380.0, 1057.5], [368.0, 1037.0], [369.0, 1046.0], [373.0, 1026.2], [374.0, 1062.2], [376.0, 1056.916666666667], [377.0, 1060.3333333333333], [378.0, 1049.0], [379.0, 19651.0], [381.0, 1093.3333333333333], [382.0, 1043.5], [383.0, 1133.5555555555557], [396.0, 1263.2857142857144], [386.0, 1219.0], [387.0, 1245.3333333333333], [397.0, 1283.7500000000002], [398.0, 1231.4285714285713], [399.0, 1231.4285714285713], [388.0, 1234.3333333333333], [390.0, 1197.6666666666667], [391.0, 1178.6666666666667], [392.0, 1180.75], [393.0, 1224.875], [394.0, 1238.8333333333335], [395.0, 1264.3333333333333], [402.0, 1093.2000000000003], [400.0, 1444.8516201676443], [403.0, 2335.8333333333335], [412.0, 1211.3636363636363], [413.0, 19636.47058823529], [414.0, 23283.0], [415.0, 20894.25], [404.0, 1324.602409638554], [405.0, 1074.7142857142856], [406.0, 1495.392857142857], [407.0, 1129.5454545454545], [408.0, 2238.727272727273], [409.0, 3084.4166666666665], [410.0, 1162.422222222222], [411.0, 13143.5], [428.0, 1074.0], [417.0, 20397.814814814814], [419.0, 15916.5], [421.0, 1071.5], [420.0, 22042.790476190476], [422.0, 1026.0], [424.0, 5725.0], [430.0, 8074.285714285714], [429.0, 25431.5], [426.0, 24843.666666666664], [423.0, 24315.0], [416.0, 21421.630208333332], [444.0, 1986.1724137931033], [432.0, 6009.0], [435.0, 5143.666666666666], [434.0, 25551.5], [433.0, 25431.0], [437.0, 3291.0000000000005], [436.0, 25481.0], [438.0, 3811.333333333334], [439.0, 1100.6666666666667], [440.0, 2531.264705882353], [442.0, 1155.7272727272725], [441.0, 13167.5], [443.0, 1132.6666666666667], [445.0, 1167.6666666666667], [446.0, 1214.8142857142855], [447.0, 1187.0833333333333], [450.0, 1127.3707549817586], [449.0, 2704.2187500000005], [448.0, 25082.0], [463.0, 23488.642857142862], [462.0, 25004.0], [461.0, 25341.0], [460.0, 24909.0], [457.0, 25172.0], [458.0, 24900.0], [456.0, 25328.0], [455.0, 24968.0], [453.0, 25031.0], [452.0, 25104.5], [465.0, 24447.5], [464.0, 23433.764705882353], [466.0, 23491.190476190473], [467.0, 23657.5], [468.0, 23748.0], [470.0, 25076.0], [477.0, 25063.666666666668], [474.0, 25203.0], [472.0, 25166.0], [471.0, 25101.666666666668], [493.0, 20577.78947368421], [480.0, 17148.666666666668], [494.0, 20210.95238095238], [495.0, 19227.426724137913], [492.0, 25115.5], [482.0, 25136.0], [481.0, 25330.0], [491.0, 24955.0], [489.0, 25186.0], [488.0, 25029.5], [484.0, 25017.0], [496.0, 8680.21590909091], [498.0, 11336.91304347826], [497.0, 4698.631578947368], [499.0, 17020.30303030303], [500.0, 1169.743142144638]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[311.57056326819327, 1866.3278141303454]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58458722E12, "maxY": 579326.6666666666, "series": [{"data": [[1.58458746E12, 579326.6666666666], [1.58458728E12, 327449.26666666666], [1.58458734E12, 475307.26666666666], [1.58458722E12, 93167.83333333333], [1.58458752E12, 114352.16666666667], [1.5845874E12, 366099.86666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58458746E12, 0.0], [1.58458728E12, 0.0], [1.58458734E12, 0.0], [1.58458722E12, 0.0], [1.58458752E12, 0.0], [1.5845874E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58458752E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1046.8097447795835, "minX": 1.58458722E12, "maxY": 5079.719092627595, "series": [{"data": [[1.58458746E12, 1975.3355223880587], [1.58458728E12, 1089.0600739371503], [1.58458734E12, 1279.3417318537392], [1.58458722E12, 1046.8097447795835], [1.58458752E12, 5079.719092627595], [1.5845874E12, 2355.969886632018]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58458752E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58458722E12, "maxY": 4.9E-324, "series": [{"data": [[1.58458746E12, 0.0], [1.58458728E12, 0.0], [1.58458734E12, 0.0], [1.58458722E12, 0.0], [1.58458752E12, 0.0], [1.5845874E12, 0.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58458752E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1046.6761020881659, "minX": 1.58458722E12, "maxY": 5079.673724007562, "series": [{"data": [[1.58458746E12, 1975.2666417910493], [1.58458728E12, 1088.9584103512059], [1.58458734E12, 1279.2963434600676], [1.58458722E12, 1046.6761020881659], [1.58458752E12, 5079.673724007562], [1.5845874E12, 2355.9047000472356]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58458752E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1001.0, "minX": 1.0, "maxY": 22677.0, "series": [{"data": [[2.0, 1001.0], [3.0, 1001.0], [4.0, 1004.0], [5.0, 1001.5], [6.0, 1003.0], [7.0, 1004.0], [8.0, 1005.0], [9.0, 1002.0], [10.0, 1004.5], [11.0, 1001.5], [12.0, 1002.0], [13.0, 1003.0], [15.0, 1012.0], [16.0, 1004.0], [18.0, 1001.5], [20.0, 1004.5], [21.0, 1254.0], [22.0, 1001.0], [24.0, 1018.5], [28.0, 1003.0], [29.0, 1079.0], [30.0, 1002.0], [31.0, 1002.0], [36.0, 1006.0], [41.0, 1002.0], [40.0, 1001.0], [42.0, 1016.5], [43.0, 1062.0], [44.0, 1007.5], [47.0, 1010.0], [46.0, 1014.5], [49.0, 1012.0], [48.0, 1022.5], [50.0, 1036.0], [51.0, 1043.0], [54.0, 1054.0], [55.0, 1006.0], [56.0, 1005.0], [57.0, 1008.0], [62.0, 1021.0], [65.0, 1155.0], [64.0, 1006.0], [72.0, 13022.5], [74.0, 1008.0], [78.0, 1004.5], [83.0, 1035.0], [81.0, 1007.0], [87.0, 1058.0], [86.0, 1063.5], [84.0, 1082.5], [91.0, 1045.0], [89.0, 1197.0], [88.0, 1064.5], [94.0, 1030.5], [95.0, 1044.0], [93.0, 1040.0], [92.0, 1032.5], [98.0, 1036.0], [96.0, 1013.0], [97.0, 1017.0], [99.0, 1007.5], [100.0, 1007.0], [110.0, 1005.0], [108.0, 1006.0], [109.0, 1040.0], [115.0, 1054.0], [114.0, 1129.0], [113.0, 1012.0], [116.0, 1021.0], [123.0, 1019.0], [127.0, 1087.0], [126.0, 7593.5], [133.0, 1051.0], [131.0, 1056.5], [129.0, 1078.0], [132.0, 1080.0], [128.0, 1038.5], [140.0, 1077.0], [141.0, 1037.0], [138.0, 1092.0], [143.0, 1044.0], [142.0, 1063.5], [136.0, 1100.0], [147.0, 1019.0], [149.0, 1051.0], [144.0, 1029.5], [145.0, 1066.0], [146.0, 1041.0], [151.0, 1083.0], [148.0, 1083.0], [158.0, 1009.0], [167.0, 1183.0], [164.0, 1017.0], [169.0, 1043.0], [174.0, 1127.0], [170.0, 1054.0], [182.0, 1071.5], [183.0, 1064.0], [178.0, 1079.5], [176.0, 1092.0], [189.0, 1090.0], [186.0, 1092.5], [187.0, 1070.0], [190.0, 1059.0], [184.0, 1075.0], [185.0, 1076.0], [193.0, 1049.0], [195.0, 1041.0], [192.0, 1013.0], [198.0, 1063.5], [197.0, 1168.0], [199.0, 4066.0], [207.0, 1176.0], [200.0, 1014.5], [206.0, 1072.0], [216.0, 1161.0], [219.0, 1065.0], [222.0, 1094.5], [228.0, 1126.5], [226.0, 1114.5], [225.0, 1074.0], [229.0, 20451.0], [247.0, 1064.5], [241.0, 1056.0], [244.0, 1061.0], [243.0, 1066.0], [246.0, 1025.5], [240.0, 1125.5], [245.0, 1270.5], [248.0, 1040.5], [254.0, 1078.0], [250.0, 1095.5], [261.0, 1106.0], [256.0, 1108.0], [270.0, 1089.0], [271.0, 1063.0], [268.0, 1133.5], [287.0, 1091.0], [280.0, 1082.0], [272.0, 1321.0], [274.0, 1139.0], [296.0, 1077.0], [292.0, 1068.5], [299.0, 1105.0], [302.0, 1087.5], [293.0, 1166.0], [307.0, 1092.0], [304.0, 1054.0], [308.0, 1092.5], [316.0, 1089.5], [333.0, 1089.0], [322.0, 1079.5], [331.0, 1089.0], [320.0, 1166.0], [339.0, 1096.0], [348.0, 1100.5], [363.0, 1179.0], [354.0, 1088.5], [352.0, 1096.0], [373.0, 1093.0], [380.0, 2047.5], [378.0, 1091.0], [368.0, 1085.0], [371.0, 1091.0], [387.0, 1092.0], [388.0, 1127.0], [384.0, 1076.0], [394.0, 7406.5], [386.0, 1109.0], [390.0, 1124.0], [397.0, 1146.0], [411.0, 1126.0], [413.0, 1123.0], [401.0, 1099.0], [417.0, 1104.0], [426.0, 22677.0], [437.0, 20146.0], [447.0, 1115.0], [452.0, 1084.0], [450.0, 1088.5], [460.0, 1082.0], [451.0, 1083.0], [492.0, 1161.0], [1.0, 1001.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 492.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [15.0, 0.0], [16.0, 0.0], [18.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [24.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [36.0, 0.0], [41.0, 0.0], [40.0, 0.0], [42.0, 0.0], [43.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [50.0, 0.0], [51.0, 0.0], [54.0, 0.0], [55.0, 0.0], [56.0, 0.0], [57.0, 0.0], [62.0, 0.0], [65.0, 0.0], [64.0, 0.0], [72.0, 0.0], [74.0, 0.0], [78.0, 0.0], [83.0, 0.0], [81.0, 0.0], [87.0, 0.0], [86.0, 0.0], [84.0, 0.0], [91.0, 0.0], [89.0, 0.0], [88.0, 0.0], [94.0, 0.0], [95.0, 0.0], [93.0, 0.0], [92.0, 0.0], [98.0, 0.0], [96.0, 0.0], [97.0, 0.0], [99.0, 0.0], [100.0, 0.0], [110.0, 0.0], [108.0, 0.0], [109.0, 0.0], [115.0, 0.0], [114.0, 0.0], [113.0, 0.0], [116.0, 0.0], [123.0, 0.0], [127.0, 0.0], [126.0, 0.0], [133.0, 0.0], [131.0, 0.0], [129.0, 0.0], [132.0, 0.0], [128.0, 0.0], [140.0, 0.0], [141.0, 0.0], [138.0, 0.0], [143.0, 0.0], [142.0, 0.0], [136.0, 0.0], [147.0, 0.0], [149.0, 0.0], [144.0, 0.0], [145.0, 0.0], [146.0, 0.0], [151.0, 0.0], [148.0, 0.0], [158.0, 0.0], [167.0, 0.0], [164.0, 0.0], [169.0, 0.0], [174.0, 0.0], [170.0, 0.0], [182.0, 0.0], [183.0, 0.0], [178.0, 0.0], [176.0, 0.0], [189.0, 0.0], [186.0, 0.0], [187.0, 0.0], [190.0, 0.0], [184.0, 0.0], [185.0, 0.0], [193.0, 0.0], [195.0, 0.0], [192.0, 0.0], [198.0, 0.0], [197.0, 0.0], [199.0, 0.0], [207.0, 0.0], [200.0, 0.0], [206.0, 0.0], [216.0, 0.0], [219.0, 0.0], [222.0, 0.0], [228.0, 0.0], [226.0, 0.0], [225.0, 0.0], [229.0, 0.0], [247.0, 0.0], [241.0, 0.0], [244.0, 0.0], [243.0, 0.0], [246.0, 0.0], [240.0, 0.0], [245.0, 0.0], [248.0, 0.0], [254.0, 0.0], [250.0, 0.0], [261.0, 0.0], [256.0, 0.0], [270.0, 0.0], [271.0, 0.0], [268.0, 0.0], [287.0, 0.0], [280.0, 0.0], [272.0, 0.0], [274.0, 0.0], [296.0, 0.0], [292.0, 0.0], [299.0, 0.0], [302.0, 0.0], [293.0, 0.0], [307.0, 0.0], [304.0, 0.0], [308.0, 0.0], [316.0, 0.0], [333.0, 0.0], [322.0, 0.0], [331.0, 0.0], [320.0, 0.0], [339.0, 0.0], [348.0, 0.0], [363.0, 0.0], [354.0, 0.0], [352.0, 0.0], [373.0, 0.0], [380.0, 0.0], [378.0, 0.0], [368.0, 0.0], [371.0, 0.0], [387.0, 0.0], [388.0, 0.0], [384.0, 0.0], [394.0, 0.0], [386.0, 0.0], [390.0, 0.0], [397.0, 0.0], [411.0, 0.0], [413.0, 0.0], [401.0, 0.0], [417.0, 0.0], [426.0, 0.0], [437.0, 0.0], [447.0, 0.0], [452.0, 0.0], [450.0, 0.0], [460.0, 0.0], [451.0, 0.0], [492.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 492.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 35.766666666666666, "minX": 1.58458722E12, "maxY": 224.98333333333332, "series": [{"data": [[1.58458746E12, 224.98333333333332], [1.58458728E12, 127.88333333333334], [1.58458734E12, 184.91666666666666], [1.58458722E12, 37.583333333333336], [1.58458752E12, 35.766666666666666], [1.5845874E12, 142.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58458752E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 35.916666666666664, "minX": 1.58458722E12, "maxY": 223.33333333333334, "series": [{"data": [[1.58458746E12, 223.33333333333334], [1.58458728E12, 126.23333333333333], [1.58458734E12, 183.23333333333332], [1.58458722E12, 35.916666666666664], [1.58458752E12, 44.083333333333336], [1.5845874E12, 141.13333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58458752E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 35.916666666666664, "minX": 1.58458722E12, "maxY": 223.33333333333334, "series": [{"data": [[1.58458746E12, 223.33333333333334], [1.58458728E12, 126.23333333333333], [1.58458734E12, 183.23333333333332], [1.58458722E12, 35.916666666666664], [1.58458752E12, 44.083333333333336], [1.5845874E12, 141.13333333333333]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58458752E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 35.916666666666664, "minX": 1.58458722E12, "maxY": 223.33333333333334, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58458746E12, 223.33333333333334], [1.58458728E12, 126.23333333333333], [1.58458734E12, 183.23333333333332], [1.58458722E12, 35.916666666666664], [1.58458752E12, 44.083333333333336], [1.5845874E12, 141.13333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58458752E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

